#!/system/bin/sh
# Start chroot environment and services at system startup

export NEW_ROOT=/data/local/kali

#chroot v0
if [ -f /data/local/kali_img/kali.img ]; then
  export SOURCE_IMG=/data/local/kali_img/kali.img
  mount -o loop -t ext4 $SOURCE_IMG $NEW_ROOT
fi

#chroot v1+
if [ ! -d "${NEW_ROOT}" ]; then
  if [ -x /system/bin/chroot_init_setup ] && [ -x /system/xbin/busybox ]; then
    /system/bin/chroot_init_setup
    if [ "$?" != "0" ]; then
      #chroot_init_setup failed, remove broken install
      if [ -d "${NEW_ROOT}" ]; then
        busybox rm -rf "${NEW_ROOT}"
      fi
      exit 1
    fi
  else
    exit 1
  fi
fi

#AOPP is mounting /data nosuid which breaks sudo/su et al in the chroot
/system/xbin/busybox mount -o remount,suid /data
# Mount other filesystems for chroot environment
/system/xbin/busybox mount --rbind /dev $NEW_ROOT/dev
/system/xbin/busybox mount --rbind /proc $NEW_ROOT/proc
/system/xbin/busybox mount --rbind /sys $NEW_ROOT/sys
#kali 2 pretends it suppots selinux so if this is mounted rw it fails all over itself
mount | grep -q ${NEW_ROOT}/sys/fs/selinux && /system/xbin/busybox mount -o remount,ro,bind ${NEW_ROOT}/sys/fs/selinux
/system/xbin/busybox mount -o nosuid,noexec,relatime -t tmpfs tmpfs $NEW_ROOT/run

# Mount Android filesystems for chroot environment
[ ! -d "${NEW_ROOT}"/sdcard ] && mkdir "${NEW_ROOT}"/sdcard
/system/xbin/busybox mount --rbind /data/media/0 $NEW_ROOT/sdcard
[ ! -d "${NEW_ROOT}"/system ] && mkdir "${NEW_ROOT}"/system
/system/xbin/busybox mount --rbind /system $NEW_ROOT/system

# Run script to assign interfaces at system startup (wlan0 internal, wlan1 TP-Link)
/system/bin/wia-ng.sh

# Setup environment variables for shell environment.
export HOME=/root
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
export TERM=xterm-color
unset LD_PRELOAD

# Link /etc/mtab to /proc/self/mounts so we always know what is mounted
if [ -f "$NEW_ROOT/etc/mtab" ]; then
  /system/xbin/busybox chroot $NEW_ROOT /bin/rm -f /etc/mtab
  /system/xbin/busybox chroot $NEW_ROOT /bin/ln -s /proc/self/mounts /etc/mtab
fi

# Start services in chroot environment
[ -L $NEW_ROOT/etc/rc2.d/S??cron ] && /system/xbin/busybox chroot $NEW_ROOT /etc/init.d/cron start
[ -L $NEW_ROOT/etc/rc2.d/S??hermes ] && /system/xbin/busybox chroot $NEW_ROOT /etc/init.d/hermes start
[ -L $NEW_ROOT/etc/rc2.d/S??insight_api ] && /system/xbin/busybox chroot $NEW_ROOT /etc/init.d/insight_api start
[ -L $NEW_ROOT/etc/rc2.d/S??pwnix_kismet_server ] && /system/xbin/busybox chroot $NEW_ROOT /etc/init.d/pwnix_kismet_server start
[ -L $NEW_ROOT/etc/rc2.d/S??pwnix_realtime_wireless ] && /system/xbin/busybox chroot $NEW_ROOT /etc/init.d/pwnix_realtime_wireless start
[ -L $NEW_ROOT/etc/rc2.d/S??pwnscan ] && /system/xbin/busybox chroot $NEW_ROOT /etc/init.d/pwnscan start
[ -L $NEW_ROOT/etc/rc2.d/S??rc.local ] && /system/xbin/busybox chroot $NEW_ROOT /etc/init.d/rc.local start

# If first_boot.sh is in chroot root filesystem (/data/local/kali); then
# run it to generate SSH keys, etc.
# Run this last in /system/bin/chrootboot
if [ -x $NEW_ROOT/first_boot.sh ]; then
  /system/xbin/busybox chroot $NEW_ROOT /bin/bash -l -c /first_boot.sh
fi
